<?php
namespace components\thriftClient\collect;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class CollectList {
  static $_TSPEC;

  /**
   * @var int
   */
  public $rootid = null;
  /**
   * @var int
   */
  public $mainid = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $pic = null;
  /**
   * @var string
   */
  public $detailurl = null;
  /**
   * @var string
   */
  public $collecttime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'rootid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'mainid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'pic',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'detailurl',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'collecttime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['rootid'])) {
        $this->rootid = $vals['rootid'];
      }
      if (isset($vals['mainid'])) {
        $this->mainid = $vals['mainid'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['pic'])) {
        $this->pic = $vals['pic'];
      }
      if (isset($vals['detailurl'])) {
        $this->detailurl = $vals['detailurl'];
      }
      if (isset($vals['collecttime'])) {
        $this->collecttime = $vals['collecttime'];
      }
    }
  }

  public function getName() {
    return 'CollectList';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->rootid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->mainid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->pic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->detailurl);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->collecttime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('CollectList');
    if ($this->rootid !== null) {
      $xfer += $output->writeFieldBegin('rootid', TType::I32, 1);
      $xfer += $output->writeI32($this->rootid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mainid !== null) {
      $xfer += $output->writeFieldBegin('mainid', TType::I32, 2);
      $xfer += $output->writeI32($this->mainid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 3);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pic !== null) {
      $xfer += $output->writeFieldBegin('pic', TType::STRING, 4);
      $xfer += $output->writeString($this->pic);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->detailurl !== null) {
      $xfer += $output->writeFieldBegin('detailurl', TType::STRING, 5);
      $xfer += $output->writeString($this->detailurl);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->collecttime !== null) {
      $xfer += $output->writeFieldBegin('collecttime', TType::STRING, 6);
      $xfer += $output->writeString($this->collecttime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


